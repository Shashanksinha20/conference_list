{"version":3,"sources":["Card/index.js","Search/index.js","Loader/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","event","confName","confStartDate","confEndDate","venue","entryType","confUrl","imageURL","className","src","alt","href","target","Search","value","onSearch","placeholder","type","onChange","Loader","class","App","props","state","conf","allEvents","displayEvents","query","isLoaded","filterOnQueryChange","bind","fetch","then","response","json","free","paid","setState","this","queryString","toLowerCase","filteredEvents","filter","city","matchTitle","includes","matchCity","onSearchChange","length","map","index","key","conference_id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92885775.chunk.js","sourcesContent":["import React from 'react';\nimport { FaArrowRight } from 'react-icons/fa'; \nimport  \"./Card.css\"\n\nconst Card = ({ event }) => {\n  const { confName, confStartDate, confEndDate, venue, entryType, confUrl, imageURL} = event;\n\n\treturn (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <img className=\"card-image\" src={imageURL} alt={confName} />\n      </div>\n      <div className = \"card-details\">\n        <h2 className=\"card-info\">{confName}</h2>\n        <p className=\"card-info\">{`Conference Date: ${confStartDate} - ${confEndDate}`}</p>\n        <p className=\"card-info\">Venue: {venue}</p>\n        <p className=\"card-info\">Entry: {entryType}</p>\n        <a href={confUrl} className=\"card-icon\" target=\"_blank\">\n          <p className=\"card-info\">Link to Conf</p>\n          <FaArrowRight/>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React, { useState } from 'react';\n\nconst Search = ({ value, onSearch }) => {\n  return (\n    <div className=\"search-box\">\n      <input className=\"input-search\" placeholder=\"Search Events..\" type=\"text\" value={value} onChange={(event) => onSearch(event)}/>\n    </div>\n  )\n}\n\nexport default Search;","import React from 'react';\nimport './loader.css';\n\nconst Loader = () => (\n  <div class=\"lds-roller\">\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n);\n\nexport default Loader;","import React from 'react';\nimport Card from './Card';\nimport Search from './Search';\nimport Loader from './Loader';\nimport './App.css';\n \n\nclass App extends React.Component{ \n  constructor(props){\n    super(props);\n    this.state = {\n      conf : [],\n      allEvents: [],\n      displayEvents: [],\n      query: '',\n      isLoaded: false\n    }\n    this.filterOnQueryChange =  this.filterOnQueryChange.bind(this);\n  }\n    \n  componentDidMount() {\n  fetch(\"https://o136z8hk40.execute-api.us-east-1.amazonaws.com/dev/get-list-of-conferences\")\n  .then(response => response.json())\n  .then(response => {\n      const { free, paid } = response;\n      const allEvents = [...free, ...paid];\n\n      this.setState(state => (\n        {\n          ...state, \n          conf: response,\n          allEvents,\n          displayEvents: allEvents,\n          isLoaded: true\n        }\n      ))\n  })\n  }\n\n  filterOnQueryChange(query) {\n    const { allEvents, displayEvents } = this.state;\n    const queryString = query.toLowerCase();\n\n\n    const filteredEvents = allEvents && allEvents.filter(event => {\n      const { confName, city } = event;\n      const matchTitle = confName.toLowerCase().includes(queryString);\n      const matchCity = city.toLowerCase().includes(queryString);\n\n      return matchTitle || matchCity;\n    });\n\n    this.setState(state => ({\n      ...state,\n      displayEvents: filteredEvents\n    }));\n  }\n\n  onSearchChange(event) {\n    const query = event.target.value;\n\n    this.setState(state => ({\n      ...state,\n      query\n    }), () => {\n      this.filterOnQueryChange(query);\n    });\n  }\n\n  render(){\n    const { displayEvents, query, isLoaded } = this.state;\n  \n    return (\n      <div className=\"App\">\n        <Search onSearch={(event) => this.onSearchChange(event)} value={query} />\n        {isLoaded ? (\n          displayEvents && displayEvents.length !== 0 ? (\n              displayEvents.map((event, index) => {\n              return <Card key={`${event.conference_id}_${index}`} event={event} />\n            })\n          ) : <p>Sorry! No events to display</p>\n        ) : <Loader />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}